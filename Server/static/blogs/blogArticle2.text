<h2><strong>事件处理程序</strong></h2>

                                <p><strong>DOM0 级事件处理程序</strong></p>

                                <p>DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性，使用这种方式比较简单，而且具有跨浏览器的优势；每个事件仅支持一个事件处理程序；&nbsp;<br />
                                每个元素都有自己的事件处理程序，DOM0级方法指定的事件处理程序可以认为是元素的方法，因此可以通过this获得对当前元素的引用；&nbsp;<br />
                                这种方式添加的事件处理程序会在事件流的冒泡阶段被处理；</p>

                                <p>可以通过将其设为null解除事件绑定；btn.onclick = null;</p>

                                <p>所有浏览器均支持DOM0级事件处理程序；</p>

                                <hr />
                                <p><strong>DOM2级事件处理程序</strong></p>

                                <p>DOM2级事件定义了addEventListener()和removeEventListener()，第三个参数为false表示冒泡阶段调用事件处理程序；所有的DOM节点都具有这两个方法。使用removeEventListener()移除事件处理程序时必须要与建立时传入相同的参数，addEventListener()添加的匿名函数是无法移除的；</p>

                                <p>相比于DOM0级事件处理程序，DOM2可以为同一事件添加多个事件处理程序，一般会按照它们添加的顺序触发；</p>

                                <hr />
                                <p><strong>IE事件处理程序</strong></p>

                                <p>IE中使用了attachEvent()和detachEvent()实现了与DOM中类似的功能，这两个函数均接受两个参数；事件前需要加&rdquo;on&rdquo;。IE8及更低版本仅支持事件冒泡，故attachEvent()添加的事件都会添加到冒泡阶段；</p>

                                <p>IE中使用这些方法与使用DOM0级方法的区别是事件处理程序的作用域不同：IE中attachEvent()作用域为全局作用域，而DOM0级方法的事件处理程序作用域为目标元素作用域；&nbsp;<br />
                                同样，attachEvent()也支持为一个事件绑定多个事件处理程序，但是事件触发是以绑定的相反顺序执行；</p>

                                <hr />
                                <p><strong>跨浏览器事件处理程序</strong></p>

                                <pre>
                                <code>/**
                                 * 跨浏览器的的事件处理程序
                                 * @type {Object}
                                 */
                                var EventUtil = {
                                    addHandler: function (element, type, handler) { 
                                        if (element.addEventListener) {     // DOM2级
                                            element.addEventListener(type, handler, false);
                                        } else if (element.attachEvent) {       // IE 
                                            element.attachEvent(&#39;on&#39; + type, handler);
                                        } else {        // DOM0级
                                            element[&#39;on&#39; + type] = handler;
                                        }   
                                    },
                                    removeHandler: function (element, type, handler) {
                                        if (element.removeEventListener) {
                                            element.removeEventListener(type, handler,)
                                        } else if (element.detachEvent) {
                                            element.detachEvent(&#39;on&#39; + type, handler);
                                        } else {
                                            element[&#39;on&#39; + type] = null;
                                        }
                                    }
                                }</code></pre>